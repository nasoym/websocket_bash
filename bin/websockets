#!/usr/bin/env bash
set -o errexit  # abort when any commands exits with error
set -o pipefail # abort when any command in a pipe exits with error
set -o nounset  # abort when any unset variable is used
set -o noglob # prevent bash from expanding glob
set -o errtrace # inherits trap on ERR in function and subshell
if [[ "${trace:=0}" -eq 1 ]];then
  PS4=' ${LINENO}: '
  set -x
  export trace
fi
trap 'status="$?"; echo "$(basename $0): status:${status} LINENO:${LINENO} BASH_LINENO:${BASH_LINENO} command:${BASH_COMMAND} functions:$(printf " %s" ${FUNCNAME[@]:-})"; exit ${status}' ERR
# * <https://tools.ietf.org/html/rfc6455#section-5>

function log() {
  # echo -e "\e[1;37m$(date +%H:%M) $@\e[0m" >&2
  echo -e "\e[0;37m$(date +%H:%M) $@\e[0m" >&2
}
function terminate() {
  pid="$1"
  # for child_pid in $( ps --no-headers --ppid $1 -o pid ); do
  for child_pid in $(ps -o ppid,pid  | sed '1d' | awk -v "ppid=${pid}" '{if ($1==ppid){print $2}}'); do
    echo "kill parent:$1 child: $child_pid"
    kill -9 $child_pid &
    terminate $child_pid
  done
}
function show() {
  pid="$1"
  # for child_pid in $( ps --no-headers --ppid $1 -o pid ); do
  for child_pid in $(ps -o ppid,pid  | sed '1d' | awk -v "ppid=${pid}" '{if ($1==ppid){print $2}}'); do
    echo "parent:$1 child: $child_pid"
    show $child_pid
  done
}
function close() {
  pid="$1"
  log "close: $pid !!"
  pstree $pid
  terminate $pid
}
# trap 'close' INT TERM
trap 'echo foo $$' INT TERM

self="$(cd $(dirname "${BASH_SOURCE[0]}") && pwd -P)/$(basename "$0")"
self_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

while getopts "a:h?" options; do case $options in
  a) a="$OPTARG" ;;
  h|?) help; exit ;;
esac; done; shift $((OPTIND - 1))

: ${host:="echo.websocket.org"}
: ${path:="/"}

  if which timeout >/dev/null ; then
    timeout_cmd="timeout"
  elif which gtimeout >/dev/null ; then
    timeout_cmd="gtimeout"
  fi
  if which stdbuf >/dev/null ; then
    stdbuf_cmd="stdbuf"
  elif which gstdbuf >/dev/null ; then
    stdbuf_cmd="gstdbuf"
  fi

if [[ "$#" -eq 0 ]];then
  ${0} help

elif [[ "$1" == "help" ]];then shift
  which bash_scripts >/dev/null && bash_scripts show_commands ${0} || true

elif [[ "$1" == "main" ]];then shift
  trap 'close $$' INT TERM
  log "launch $$"
  
  ws_pipe="$(mktemp -u)"
  mkfifo ${ws_pipe}
  log "created pipe: ${ws_pipe}"
  trap "log 'remove pipe: ${ws_pipe}'; rm -f ${ws_pipe}" EXIT 
  
  log "connecting ${host} ${path}"
  { \
    ${0} print_websocket_request_headers ${host} ${path}; \
    ${0} send_message_from_pipe ${ws_pipe}; \
  } \
  | socat STDIO OPENSSL:${host}:443,crnl \
  | { \
    ${0} parse_response_headers; \
    ${0} parse_response ${ws_pipe}; \
  }
    # echo -n "hello\n" >> ${ws_pipe}; \
  # -vvvv \
  # OPENSSL:${host}:443,ignoreeof,crnl \

elif [[ "$1" == "parse_response" ]];then shift
  file="$1"; shift
  # xxd -g0 -c1 
  ${stdbuf_cmd} -i0 -o0 -e0 xxd -u -ps -c1 \
  | while read byte; do
    # echo "${byte} --"
    # log "got byte: ${byte} : $(echo -n "${byte}" | xxd -ps -r)"
    if [[ "${byte}" == "81" ]];then
      log "got text"
      read count
      count="$(echo "ibase=16;${count}" | bc)"
      if [[ "${count}" -eq "126" ]];then
        read -N $(( 2 * 3 )) count
        count="$( echo -n "${count}" | tr -d "\n")"
        count="$(echo "ibase=16;${count}" | bc)"
        log "count: 126 !: ${count}" 
      elif [[ "${count}" -eq "127" ]];then
        read -N $(( 8 * 3 )) count
        count="$( echo -n "${count}" | tr -d "\n")"
        count="$(echo "ibase=16;${count}" | bc)"
        log "count: 127 !: ${count}" 
      elif [[ "${count}" -lt "126" ]];then
        log "count: < 126 ! :${count}" 
      else
        :
      fi
      # log "count: ${count}" 
      # chars=""
      # for (( i=1; i<=count; i++ )); do
      #   read char
      #   chars+="${char}"
      #   # log "got char ${i}: ${char} $(echo -n "${char}" | xxd -ps -r)"
      # done
      # log "got chars: ${chars}"
      # echo -n "${chars}" | xxd -ps -r 

      read -N $(( ${count} * 3 )) content
      # log "got content: ${content}"
      echo "${content}" | xxd -ps -r 
      echo
    elif [[ "${byte}" == "89" ]];then
      log "got ping"
      read zero
      log "send pong"
      echo -en "\x8A\x00" >> ${file}
    elif [[ "${byte}" == "8a" ]];then
      log "got pong"
      read zero
    elif [[ "${byte}" == "88" ]];then
      log "got close"
    elif [[ "${byte}" == "80" ]];then
      log "got continuation"
    else
      echo "${byte} --"
    fi
  done

  # xxd -ps -c1 \
  # ${stdbuf_cmd} -i0 -o0 -e0 xxd -ps -c1 \
  # | sed -u -e '/^80$/d' -e '/^00$/d' -e 's/^ff$/0a/g' \
  # | ${stdbuf_cmd} -i0 -o0 -e0 xxd -ps -r \
  # | sed -u -e '/^{/!d' \



# 00000000: 8a  .
# 00000001: 07  .
# 00000002: 68  h
# 00000003: 65  e
# 00000004: 6c  l
# 00000005: 6c  l
# 00000006: 6f  o
# 00000007: 0a  .
# 00000000: 8907 6865 6c6c 6f0a 0d                   ..hello..
# 23:11 send from pipe /tmp/tmp.up60MAhIlx:
# 00000008: 88  .
# 00000009: 02  .
# 0000000a: 03  .
# 0000000b: ea  .


elif [[ "$1" == "print_websocket_request_headers" ]];then shift
  host="$1"; shift
  path="$1"; shift
  echo "\
GET ${path} HTTP/1.1
Host: ${host}
User-Agent: curl/7.54.0
Accept: */*
Connection: Upgrade
Upgrade: websocket
Origin: http://www.websocket.org
Sec-WebSocket-Version: 13
Sec-WebSocket-Key: vdEB/U8/zHN2Xww2rbgAvg==
Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
" 

elif [[ "$1" == "transform_message" ]];then shift
  input="$(cat -)"
  echo "${input}" | xxd >&2
  # input_length="${#input}"
  # input_length="$( printf "%s" "${input}" | wc -c )"
  # input_length="$( echo -en "${input}" | wc -c )"
  input_length="$( echo "${input}" | wc -c )"
  input_length="$(printf "%02d" "$(( ${input_length} ))")"
  echo -en "\x81\x${input_length}${input}" 

elif [[ "$1" == "send_message_from_pipe" ]];then shift
  file="$1"; shift
  if [[ -p "${file}" ]];then
    while true; do
      log "send from pipe ${file}: "
      cat ${file} | tee >(xxd >&2)
    done
  fi

elif [[ "$1" == "parse_response_headers" ]];then shift
  while read -r line; do
    if grep '^$' <<<"${line}" >/dev/null ;then
      log "got all headers"
      break
    fi
  done

else
  echo "unknown command: $@" >&2
  exit 1
fi

# CLIENT REQUEST
# GET /echo HTTP/1.1
# Host: localhost:9090
# Connection: Upgrade
# Pragma: no-cache
# Cache-Control: no-cache
# Upgrade: websocket
# Origin: https://www.startpage.com
# Sec-WebSocket-Version: 13
# User-Agent: Mozilla/5.0 (X11; Linux armv7l) AppleWebKit/537.36 (KHTML, like Gecko) Raspbian Chromium/65.0.3325.181 Chrome/65.0.3325.181 Safari/537.36
# Accept-Encoding: gzip, deflate, br
# Accept-Language: en-US,en;q=0.9,de;q=0.8
# Sec-WebSocket-Key: vdEB/U8/zHN2Xww2rbgAvg==
# Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits


# WEBSOCKET SERVER RESPONSE
# < HTTP/1.1 101 Web Socket Protocol Handshake
# < Access-Control-Allow-Credentials: true
# < Access-Control-Allow-Headers: content-type
# < Access-Control-Allow-Headers: authorization
# < Access-Control-Allow-Headers: x-websocket-extensions
# < Access-Control-Allow-Headers: x-websocket-version
# < Access-Control-Allow-Headers: x-websocket-protocol
# < Access-Control-Allow-Origin: http://www.websocket.org
# < Connection: Upgrade
# < Date: Wed, 17 Oct 2018 19:41:03 GMT
# < Sec-WebSocket-Accept: Qw5667ia0q27TEnIGy5uiLiNWHg=
# < Server: Kaazing Gateway
# < Upgrade: websocket


